[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HaoxuanLi",
    "section": "",
    "text": "Welcome to my website!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Projects",
    "section": "",
    "text": "A Replication of Karlan and List (2007)\n\n\n\n\n\n\nHaoxuan Li\n\n\nApr 23, 2025\n\n\n\n\n\n\n\n\n\n\n\nAI Stock Predictor\n\n\nUsing LSTM to forecast stock prices\n\n\n\n\n\n\nApr 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/project1/index.html",
    "href": "projects/project1/index.html",
    "title": "AI Stock Predictor",
    "section": "",
    "text": "This project uses a recurrent neural network to predict stock prices based on historical time series data using LSTM models. Results show improved accuracy over traditional methods."
  },
  {
    "objectID": "projects/HW1/index.html",
    "href": "projects/HW1/index.html",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nThis project seeks to replicate their results.\n\n\n\nimport pandas as pd\n\n\ndf = pd.read_stata(\"C:/Users/ASUS/Downloads/karlan_list_2007.dta\")\n\ndf.head()\n\n\n\n\n\n\n\n\ntreatment\ncontrol\nratio\nratio2\nratio3\nsize\nsize25\nsize50\nsize100\nsizeno\n...\nredcty\nbluecty\npwhite\npblack\npage18_39\nave_hh_sz\nmedian_hhincome\npowner\npsch_atlstba\npop_propurban\n\n\n\n\n0\n0\n1\nControl\n0\n0\nControl\n0\n0\n0\n0\n...\n0.0\n1.0\n0.446493\n0.527769\n0.317591\n2.10\n28517.0\n0.499807\n0.324528\n1.0\n\n\n1\n0\n1\nControl\n0\n0\nControl\n0\n0\n0\n0\n...\n1.0\n0.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n1\n0\n1\n0\n0\n$100,000\n0\n0\n1\n0\n...\n0.0\n1.0\n0.935706\n0.011948\n0.276128\n2.48\n51175.0\n0.721941\n0.192668\n1.0\n\n\n3\n1\n0\n1\n0\n0\nUnstated\n0\n0\n0\n1\n...\n1.0\n0.0\n0.888331\n0.010760\n0.279412\n2.65\n79269.0\n0.920431\n0.412142\n1.0\n\n\n4\n1\n0\n1\n0\n0\n$50,000\n0\n1\n0\n0\n...\n0.0\n1.0\n0.759014\n0.127421\n0.442389\n1.85\n40908.0\n0.416072\n0.439965\n1.0\n\n\n\n\n5 rows × 51 columns\n\n\n\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n# --- Basic summary of dataset ---\nprint(\"Dataset dimensions (rows x columns):\", df.shape)\n\n# --- Core outcome: 'gave' ---\nprint(\"\\nDistribution of 'gave' (percentage):\")\nprint(df['gave'].value_counts(normalize=True).round(3) * 100)\n\n# --- Core outcome: donation amount ---\nprint(\"\\nSummary statistics for 'amount' (donation):\")\nprint(df['amount'].describe())\n\n# --- Treatment group sizes ---\nprint(\"\\nTreatment group sizes:\")\nprint(df['treatment'].value_counts())\n\n\n# --- Match threshold sizes ---\nprint(\"\\nMatch threshold types:\")\nprint(df[['size25', 'size50', 'size100', 'sizeno']].sum())\n\n# --- Ask suggestion levels ---\nprint(\"\\nSuggested ask levels:\")\nprint(df[['askd1', 'askd2', 'askd3']].sum())\n\n# --- Donor history: frequency and recency ---\nprint(\"\\nPrior donation summary:\")\nprint(df[['freq', 'years', 'mrm2']].describe())\n\n# --- Demographics ---\nprint(\"\\nGender breakdown:\")\nprint(df['female'].value_counts())\n\nprint(\"\\nCouple vs individual:\")\nprint(df['couple'].value_counts())\n\n# --- Geographic: political environment ---\nprint(\"\\nRed vs Blue states:\")\nprint(df[['red0', 'blue0']].sum())\n\n# --- Missing value overview (first 15 columns) ---\nprint(\"\\nMissing values (first 15 variables):\")\nprint(df.iloc[:, :15].isna().sum())\n\nDataset dimensions (rows x columns): (50083, 51)\n\nDistribution of 'gave' (percentage):\ngave\n0    97.9\n1     2.1\nName: proportion, dtype: float64\n\nSummary statistics for 'amount' (donation):\ncount    50083.000000\nmean         0.915694\nstd          8.709199\nmin          0.000000\n25%          0.000000\n50%          0.000000\n75%          0.000000\nmax        400.000000\nName: amount, dtype: float64\n\nTreatment group sizes:\ntreatment\n1    33396\n0    16687\nName: count, dtype: int64\n\nMatch threshold types:\nsize25     8350\nsize50     8345\nsize100    8350\nsizeno     8351\ndtype: int64\n\nSuggested ask levels:\naskd1    11134\naskd2    11133\naskd3    11129\ndtype: int64\n\nPrior donation summary:\n               freq         years          mrm2\ncount  50083.000000  50082.000000  50082.000000\nmean       8.039355      6.097540     13.007268\nstd       11.394454      5.503492     12.081403\nmin        0.000000      0.000000      0.000000\n25%        2.000000      2.000000      4.000000\n50%        4.000000      5.000000      8.000000\n75%       10.000000      9.000000     19.000000\nmax      218.000000     95.000000    168.000000\n\nGender breakdown:\nfemale\n0.0    35374\n1.0    13598\nName: count, dtype: int64\n\nCouple vs individual:\ncouple\n0.0    44438\n1.0     4497\nName: count, dtype: int64\n\nRed vs Blue states:\nred0     20242.0\nblue0    29806.0\ndtype: float64\n\nMissing values (first 15 variables):\ntreatment    0\ncontrol      0\nratio        0\nratio2       0\nratio3       0\nsize         0\nsize25       0\nsize50       0\nsize100      0\nsizeno       0\nask          0\naskd1        0\naskd2        0\naskd3        0\nask1         0\ndtype: int64\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\n\n# --- Basic summary of dataset ---\nprint(\"Dataset dimensions (rows x columns):\", df.shape)\n\n# --- Core outcome: 'gave' ---\nprint(\"\\nDistribution of 'gave' (percentage):\")\nprint(df['gave'].value_counts(normalize=True).round(3) * 100)\n\n# --- Core outcome: donation amount ---\nprint(\"\\nSummary statistics for 'amount' (donation):\")\nprint(df['amount'].describe())\n\n# --- Treatment group sizes ---\nprint(\"\\nTreatment group sizes:\")\nprint(df['treatment'].value_counts())\n\n\n# --- Match threshold sizes ---\nprint(\"\\nMatch threshold types:\")\nprint(df[['size25', 'size50', 'size100', 'sizeno']].sum())\n\n# --- Ask suggestion levels ---\nprint(\"\\nSuggested ask levels:\")\nprint(df[['askd1', 'askd2', 'askd3']].sum())\n\n# --- Donor history: frequency and recency ---\nprint(\"\\nPrior donation summary:\")\nprint(df[['freq', 'years', 'mrm2']].describe())\n\n# --- Demographics ---\nprint(\"\\nGender breakdown:\")\nprint(df['female'].value_counts())\n\nprint(\"\\nCouple vs individual:\")\nprint(df['couple'].value_counts())\n\n# --- Geographic: political environment ---\nprint(\"\\nRed vs Blue states:\")\nprint(df[['red0', 'blue0']].sum())\n\n# --- Missing value overview (first 15 columns) ---\nprint(\"\\nMissing values (first 15 variables):\")\nprint(df.iloc[:, :15].isna().sum())\n\nDataset dimensions (rows x columns): (50083, 51)\n\nDistribution of 'gave' (percentage):\ngave\n0    97.9\n1     2.1\nName: proportion, dtype: float64\n\nSummary statistics for 'amount' (donation):\ncount    50083.000000\nmean         0.915694\nstd          8.709199\nmin          0.000000\n25%          0.000000\n50%          0.000000\n75%          0.000000\nmax        400.000000\nName: amount, dtype: float64\n\nTreatment group sizes:\ntreatment\n1    33396\n0    16687\nName: count, dtype: int64\n\nMatch threshold types:\nsize25     8350\nsize50     8345\nsize100    8350\nsizeno     8351\ndtype: int64\n\nSuggested ask levels:\naskd1    11134\naskd2    11133\naskd3    11129\ndtype: int64\n\nPrior donation summary:\n               freq         years          mrm2\ncount  50083.000000  50082.000000  50082.000000\nmean       8.039355      6.097540     13.007268\nstd       11.394454      5.503492     12.081403\nmin        0.000000      0.000000      0.000000\n25%        2.000000      2.000000      4.000000\n50%        4.000000      5.000000      8.000000\n75%       10.000000      9.000000     19.000000\nmax      218.000000     95.000000    168.000000\n\nGender breakdown:\nfemale\n0.0    35374\n1.0    13598\nName: count, dtype: int64\n\nCouple vs individual:\ncouple\n0.0    44438\n1.0     4497\nName: count, dtype: int64\n\nRed vs Blue states:\nred0     20242.0\nblue0    29806.0\ndtype: float64\n\nMissing values (first 15 variables):\ntreatment    0\ncontrol      0\nratio        0\nratio2       0\nratio3       0\nsize         0\nsize25       0\nsize50       0\nsize100      0\nsizeno       0\nask          0\naskd1        0\naskd2        0\naskd3        0\nask1         0\ndtype: int64\n\n\n\n\n\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\n\nimport scipy.stats as stats\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\n\nvar = 'mrm2'\n\ntreated = df[df['treatment'] == 1][var].dropna()\ncontrol = df[df['treatment'] == 0][var].dropna()\n\nt_stat, p_val = stats.ttest_ind(treated, control, equal_var=False)\nprint(f\"t-test for {var}:\")\nprint(f\"t = {t_stat:.3f}, p = {p_val:.4f}\")\n\nmodel = smf.ols(f\"{var} ~ treatment\", data=df).fit()\nprint(f\"\\nLinear regression for {var} ~ treatment:\")\nprint(model.summary().tables[1])\n...\n\nt-test for mrm2:\nt = 0.120, p = 0.9049\n\nLinear regression for mrm2 ~ treatment:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     12.9981      0.094    138.979      0.000      12.815      13.181\ntreatment      0.0137      0.115      0.119      0.905      -0.211       0.238\n==============================================================================\n\n\nEllipsis\n\n\n\n\n\nTo verify that random assignment was successful, we compare several non-outcome variables between the treatment and control groups.\nWe begin with mrm2, which represents the number of months since the last donation. Using both a t-test and a simple linear regression, we find no statistically significant difference between the groups:\n\nThe t-test yields t = 0.120, p = 0.905.\nThe regression coefficient on the treatment indicator is 0.014 (p = 0.905).\n\nThis confirms the results are consistent across both methods, as expected. These findings support the randomization validity and are in line with Table 1 in Karlan & List (2007), which demonstrates that observable donor characteristics are well balanced across experimental arms.\n\nvar = 'years'\n\n\ntreated = df[df['treatment'] == 1][var].dropna()\ncontrol = df[df['treatment'] == 0][var].dropna()\n\n\nt_stat, p_val = stats.ttest_ind(treated, control, equal_var=False)\nprint(f\"t-test for {var}:\")\nprint(f\"t = {t_stat:.3f}, p = {p_val:.4f}\")\n\n\nmodel = smf.ols(f\"{var} ~ treatment\", data=df).fit()\nprint(f\"\\nLinear regression for {var} ~ treatment:\")\nprint(model.summary().tables[1])\n\nt-test for years:\nt = -1.091, p = 0.2753\n\nLinear regression for years ~ treatment:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      6.1359      0.043    144.023      0.000       6.052       6.219\ntreatment     -0.0575      0.052     -1.103      0.270      -0.160       0.045\n==============================================================================\n\n\nWe next test for balance on the variable years, which measures the number of years since the individual’s first donation.\n\nThe independent samples t-test yields t = -1.091 with p = 0.275, indicating no significant difference.\nA linear regression of years on the treatment indicator produces a coefficient of -0.0575 (p = 0.270).\n\nBoth methods confirm that this variable is well balanced across treatment and control groups. This result is consistent with Table 1 in Karlan & List (2007), and supports the success of the random assignment procedure."
  },
  {
    "objectID": "projects/HW1/index.html#introduction",
    "href": "projects/HW1/index.html#introduction",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the American Economic Review in 2007. The article and supporting data are available from the AEA website and from Innovations for Poverty Action as part of Harvard’s Dataverse.\nThis project seeks to replicate their results.\n\n\n\nimport pandas as pd\n\n\ndf = pd.read_stata(\"C:/Users/ASUS/Downloads/karlan_list_2007.dta\")\n\ndf.head()\n\n\n\n\n\n\n\n\ntreatment\ncontrol\nratio\nratio2\nratio3\nsize\nsize25\nsize50\nsize100\nsizeno\n...\nredcty\nbluecty\npwhite\npblack\npage18_39\nave_hh_sz\nmedian_hhincome\npowner\npsch_atlstba\npop_propurban\n\n\n\n\n0\n0\n1\nControl\n0\n0\nControl\n0\n0\n0\n0\n...\n0.0\n1.0\n0.446493\n0.527769\n0.317591\n2.10\n28517.0\n0.499807\n0.324528\n1.0\n\n\n1\n0\n1\nControl\n0\n0\nControl\n0\n0\n0\n0\n...\n1.0\n0.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n1\n0\n1\n0\n0\n$100,000\n0\n0\n1\n0\n...\n0.0\n1.0\n0.935706\n0.011948\n0.276128\n2.48\n51175.0\n0.721941\n0.192668\n1.0\n\n\n3\n1\n0\n1\n0\n0\nUnstated\n0\n0\n0\n1\n...\n1.0\n0.0\n0.888331\n0.010760\n0.279412\n2.65\n79269.0\n0.920431\n0.412142\n1.0\n\n\n4\n1\n0\n1\n0\n0\n$50,000\n0\n1\n0\n0\n...\n0.0\n1.0\n0.759014\n0.127421\n0.442389\n1.85\n40908.0\n0.416072\n0.439965\n1.0\n\n\n\n\n5 rows × 51 columns\n\n\n\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n# --- Basic summary of dataset ---\nprint(\"Dataset dimensions (rows x columns):\", df.shape)\n\n# --- Core outcome: 'gave' ---\nprint(\"\\nDistribution of 'gave' (percentage):\")\nprint(df['gave'].value_counts(normalize=True).round(3) * 100)\n\n# --- Core outcome: donation amount ---\nprint(\"\\nSummary statistics for 'amount' (donation):\")\nprint(df['amount'].describe())\n\n# --- Treatment group sizes ---\nprint(\"\\nTreatment group sizes:\")\nprint(df['treatment'].value_counts())\n\n\n# --- Match threshold sizes ---\nprint(\"\\nMatch threshold types:\")\nprint(df[['size25', 'size50', 'size100', 'sizeno']].sum())\n\n# --- Ask suggestion levels ---\nprint(\"\\nSuggested ask levels:\")\nprint(df[['askd1', 'askd2', 'askd3']].sum())\n\n# --- Donor history: frequency and recency ---\nprint(\"\\nPrior donation summary:\")\nprint(df[['freq', 'years', 'mrm2']].describe())\n\n# --- Demographics ---\nprint(\"\\nGender breakdown:\")\nprint(df['female'].value_counts())\n\nprint(\"\\nCouple vs individual:\")\nprint(df['couple'].value_counts())\n\n# --- Geographic: political environment ---\nprint(\"\\nRed vs Blue states:\")\nprint(df[['red0', 'blue0']].sum())\n\n# --- Missing value overview (first 15 columns) ---\nprint(\"\\nMissing values (first 15 variables):\")\nprint(df.iloc[:, :15].isna().sum())\n\nDataset dimensions (rows x columns): (50083, 51)\n\nDistribution of 'gave' (percentage):\ngave\n0    97.9\n1     2.1\nName: proportion, dtype: float64\n\nSummary statistics for 'amount' (donation):\ncount    50083.000000\nmean         0.915694\nstd          8.709199\nmin          0.000000\n25%          0.000000\n50%          0.000000\n75%          0.000000\nmax        400.000000\nName: amount, dtype: float64\n\nTreatment group sizes:\ntreatment\n1    33396\n0    16687\nName: count, dtype: int64\n\nMatch threshold types:\nsize25     8350\nsize50     8345\nsize100    8350\nsizeno     8351\ndtype: int64\n\nSuggested ask levels:\naskd1    11134\naskd2    11133\naskd3    11129\ndtype: int64\n\nPrior donation summary:\n               freq         years          mrm2\ncount  50083.000000  50082.000000  50082.000000\nmean       8.039355      6.097540     13.007268\nstd       11.394454      5.503492     12.081403\nmin        0.000000      0.000000      0.000000\n25%        2.000000      2.000000      4.000000\n50%        4.000000      5.000000      8.000000\n75%       10.000000      9.000000     19.000000\nmax      218.000000     95.000000    168.000000\n\nGender breakdown:\nfemale\n0.0    35374\n1.0    13598\nName: count, dtype: int64\n\nCouple vs individual:\ncouple\n0.0    44438\n1.0     4497\nName: count, dtype: int64\n\nRed vs Blue states:\nred0     20242.0\nblue0    29806.0\ndtype: float64\n\nMissing values (first 15 variables):\ntreatment    0\ncontrol      0\nratio        0\nratio2       0\nratio3       0\nsize         0\nsize25       0\nsize50       0\nsize100      0\nsizeno       0\nask          0\naskd1        0\naskd2        0\naskd3        0\nask1         0\ndtype: int64\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\n\n# --- Basic summary of dataset ---\nprint(\"Dataset dimensions (rows x columns):\", df.shape)\n\n# --- Core outcome: 'gave' ---\nprint(\"\\nDistribution of 'gave' (percentage):\")\nprint(df['gave'].value_counts(normalize=True).round(3) * 100)\n\n# --- Core outcome: donation amount ---\nprint(\"\\nSummary statistics for 'amount' (donation):\")\nprint(df['amount'].describe())\n\n# --- Treatment group sizes ---\nprint(\"\\nTreatment group sizes:\")\nprint(df['treatment'].value_counts())\n\n\n# --- Match threshold sizes ---\nprint(\"\\nMatch threshold types:\")\nprint(df[['size25', 'size50', 'size100', 'sizeno']].sum())\n\n# --- Ask suggestion levels ---\nprint(\"\\nSuggested ask levels:\")\nprint(df[['askd1', 'askd2', 'askd3']].sum())\n\n# --- Donor history: frequency and recency ---\nprint(\"\\nPrior donation summary:\")\nprint(df[['freq', 'years', 'mrm2']].describe())\n\n# --- Demographics ---\nprint(\"\\nGender breakdown:\")\nprint(df['female'].value_counts())\n\nprint(\"\\nCouple vs individual:\")\nprint(df['couple'].value_counts())\n\n# --- Geographic: political environment ---\nprint(\"\\nRed vs Blue states:\")\nprint(df[['red0', 'blue0']].sum())\n\n# --- Missing value overview (first 15 columns) ---\nprint(\"\\nMissing values (first 15 variables):\")\nprint(df.iloc[:, :15].isna().sum())\n\nDataset dimensions (rows x columns): (50083, 51)\n\nDistribution of 'gave' (percentage):\ngave\n0    97.9\n1     2.1\nName: proportion, dtype: float64\n\nSummary statistics for 'amount' (donation):\ncount    50083.000000\nmean         0.915694\nstd          8.709199\nmin          0.000000\n25%          0.000000\n50%          0.000000\n75%          0.000000\nmax        400.000000\nName: amount, dtype: float64\n\nTreatment group sizes:\ntreatment\n1    33396\n0    16687\nName: count, dtype: int64\n\nMatch threshold types:\nsize25     8350\nsize50     8345\nsize100    8350\nsizeno     8351\ndtype: int64\n\nSuggested ask levels:\naskd1    11134\naskd2    11133\naskd3    11129\ndtype: int64\n\nPrior donation summary:\n               freq         years          mrm2\ncount  50083.000000  50082.000000  50082.000000\nmean       8.039355      6.097540     13.007268\nstd       11.394454      5.503492     12.081403\nmin        0.000000      0.000000      0.000000\n25%        2.000000      2.000000      4.000000\n50%        4.000000      5.000000      8.000000\n75%       10.000000      9.000000     19.000000\nmax      218.000000     95.000000    168.000000\n\nGender breakdown:\nfemale\n0.0    35374\n1.0    13598\nName: count, dtype: int64\n\nCouple vs individual:\ncouple\n0.0    44438\n1.0     4497\nName: count, dtype: int64\n\nRed vs Blue states:\nred0     20242.0\nblue0    29806.0\ndtype: float64\n\nMissing values (first 15 variables):\ntreatment    0\ncontrol      0\nratio        0\nratio2       0\nratio3       0\nsize         0\nsize25       0\nsize50       0\nsize100      0\nsizeno       0\nask          0\naskd1        0\naskd2        0\naskd3        0\nask1         0\ndtype: int64\n\n\n\n\n\nAs an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.\n\nimport scipy.stats as stats\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\n\nvar = 'mrm2'\n\ntreated = df[df['treatment'] == 1][var].dropna()\ncontrol = df[df['treatment'] == 0][var].dropna()\n\nt_stat, p_val = stats.ttest_ind(treated, control, equal_var=False)\nprint(f\"t-test for {var}:\")\nprint(f\"t = {t_stat:.3f}, p = {p_val:.4f}\")\n\nmodel = smf.ols(f\"{var} ~ treatment\", data=df).fit()\nprint(f\"\\nLinear regression for {var} ~ treatment:\")\nprint(model.summary().tables[1])\n...\n\nt-test for mrm2:\nt = 0.120, p = 0.9049\n\nLinear regression for mrm2 ~ treatment:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     12.9981      0.094    138.979      0.000      12.815      13.181\ntreatment      0.0137      0.115      0.119      0.905      -0.211       0.238\n==============================================================================\n\n\nEllipsis\n\n\n\n\n\nTo verify that random assignment was successful, we compare several non-outcome variables between the treatment and control groups.\nWe begin with mrm2, which represents the number of months since the last donation. Using both a t-test and a simple linear regression, we find no statistically significant difference between the groups:\n\nThe t-test yields t = 0.120, p = 0.905.\nThe regression coefficient on the treatment indicator is 0.014 (p = 0.905).\n\nThis confirms the results are consistent across both methods, as expected. These findings support the randomization validity and are in line with Table 1 in Karlan & List (2007), which demonstrates that observable donor characteristics are well balanced across experimental arms.\n\nvar = 'years'\n\n\ntreated = df[df['treatment'] == 1][var].dropna()\ncontrol = df[df['treatment'] == 0][var].dropna()\n\n\nt_stat, p_val = stats.ttest_ind(treated, control, equal_var=False)\nprint(f\"t-test for {var}:\")\nprint(f\"t = {t_stat:.3f}, p = {p_val:.4f}\")\n\n\nmodel = smf.ols(f\"{var} ~ treatment\", data=df).fit()\nprint(f\"\\nLinear regression for {var} ~ treatment:\")\nprint(model.summary().tables[1])\n\nt-test for years:\nt = -1.091, p = 0.2753\n\nLinear regression for years ~ treatment:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      6.1359      0.043    144.023      0.000       6.052       6.219\ntreatment     -0.0575      0.052     -1.103      0.270      -0.160       0.045\n==============================================================================\n\n\nWe next test for balance on the variable years, which measures the number of years since the individual’s first donation.\n\nThe independent samples t-test yields t = -1.091 with p = 0.275, indicating no significant difference.\nA linear regression of years on the treatment indicator produces a coefficient of -0.0575 (p = 0.270).\n\nBoth methods confirm that this variable is well balanced across treatment and control groups. This result is consistent with Table 1 in Karlan & List (2007), and supports the success of the random assignment procedure."
  },
  {
    "objectID": "projects/HW1/index.html#experimental-results",
    "href": "projects/HW1/index.html#experimental-results",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\nCharitable Contribution Made\nFirst, I analyze whether matched donations lead to an increased response rate of making a donation.\n\nimport matplotlib.pyplot as plt\n\ndonation_rate = df.groupby('treatment')['gave'].mean()\n\n\ndonation_rate.plot(kind='bar')\nplt.xticks([0, 1], ['Control', 'Treatment'], rotation=0)\nplt.title(\"Donation Rate by Treatment Group\")\nplt.ylabel(\"Proportion who donated\")\nplt.show()\n\n\n\n\n\n\n\n\n\ntreated = df[df['treatment'] == 1]['gave']\ncontrol = df[df['treatment'] == 0]['gave']\n\n\nt_stat, p_val = stats.ttest_ind(treated, control, equal_var=False)\nprint(f\"t-test for gave: t = {t_stat:.3f}, p = {p_val:.4f}\")\n\n\nmodel_linear = smf.ols(\"gave ~ treatment\", data=df).fit()\nprint(\"\\nLinear regression result:\")\nprint(model_linear.summary().tables[1])\n\nt-test for gave: t = 3.209, p = 0.0013\n\nLinear regression result:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.0179      0.001     16.225      0.000       0.016       0.020\ntreatment      0.0042      0.001      3.101      0.002       0.002       0.007\n==============================================================================\n\n\n\nmodel_probit = smf.probit(\"gave ~ treatment\", data=df).fit()\nprint(\"\\nProbit regression result:\")\nprint(model_probit.summary().tables[1])\n\nOptimization terminated successfully.\n         Current function value: 0.100443\n         Iterations 7\n\nProbit regression result:\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     -2.1001      0.023    -90.073      0.000      -2.146      -2.054\ntreatment      0.0868      0.028      3.113      0.002       0.032       0.141\n==============================================================================\n\n\n\n\nCharitable Contribution Made\nWe examine whether offering a matching donation increases the likelihood of charitable giving. First, we create a bar plot comparing the donation rates between the treatment and control groups. The treatment group exhibits a higher response rate (2.21%) compared to the control group (1.79%).\nTo formally test the difference, we conduct a t-test and a bivariate linear regression. The t-test yields a statistically significant result (t = 3.209, p = 0.0013), indicating that the difference in donation rates is unlikely to be due to chance. The regression confirms this finding, showing that the treatment increases the probability of giving by 0.42 percentage points (p = 0.002).\nWe further estimate a probit model to mirror Table 3, column 1 of Karlan and List (2007). The probit regression yields a treatment coefficient of 0.0868 (p = 0.002), confirming that assignment to the matching treatment significantly increases the likelihood of donation.\nThese results support the paper’s main finding: merely mentioning that a donation will be matched is enough to boost giving behavior. This highlights the power of framing and suggests that perceived leverage or impact motivates donors.\n\n\nDifferences between Match Rates\nNext, I assess the effectiveness of different sizes of matched donations on the response rate.\n\ngave_11 = df[(df['ratio2'] == 0) & (df['ratio3'] == 0)]['gave']\ngave_21 = df[df['ratio2'] == 1]['gave']\ngave_31 = df[df['ratio3'] == 1]['gave']\n\n\nprint(\"T-tests comparing match ratios:\")\nt1, p1 = stats.ttest_ind(gave_11, gave_21, equal_var=False)\nprint(f\"1:1 vs 2:1  --&gt; t = {t1:.3f}, p = {p1:.4f}\")\n\nt2, p2 = stats.ttest_ind(gave_21, gave_31, equal_var=False)\nprint(f\"2:1 vs 3:1  --&gt; t = {t2:.3f}, p = {p2:.4f}\")\n\n\nmodel = smf.ols(\"gave ~ ratio2 + ratio3\", data=df).fit()\nprint(\"\\nLinear regression for match ratios:\")\nprint(model.summary().tables[1])\n\n\nrate_11 = gave_11.mean()\nrate_21 = gave_21.mean()\nrate_31 = gave_31.mean()\nprint(\"\\nResponse rate differences:\")\nprint(f\"2:1 - 1:1 = {rate_21 - rate_11:.4f}\")\nprint(f\"3:1 - 2:1 = {rate_31 - rate_21:.4f}\")\n\nT-tests comparing match ratios:\n1:1 vs 2:1  --&gt; t = -2.220, p = 0.0265\n2:1 vs 3:1  --&gt; t = -0.050, p = 0.9600\n\nLinear regression for match ratios:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.0190      0.001     22.306      0.000       0.017       0.021\nratio2         0.0036      0.002      2.269      0.023       0.000       0.007\nratio3         0.0037      0.002      2.332      0.020       0.001       0.007\n==============================================================================\n\nResponse rate differences:\n2:1 - 1:1 = 0.0036\n3:1 - 2:1 = 0.0001\n\n\nWe evaluate whether higher match ratios increase the likelihood of donating. The 1:1 match rate serves as the baseline.\nFirst, using a t-test, we find a statistically significant increase in donation likelihood when moving from a 1:1 to a 2:1 match (p = 0.0265), but no significant difference between 2:1 and 3:1 (p = 0.9600).\nA regression of the binary outcome gave on match ratio indicators confirms this. The coefficients on ratio2 and ratio3 are 0.0036 and 0.0037, respectively, both significant at the 5% level. This suggests that increasing the match rate from 1:1 to 2:1 increases the probability of donation by roughly 0.36 percentage points. However, moving from 2:1 to 3:1 yields virtually no further increase.\nThese findings support the interpretation on page 8 of Karlan and List (2007): while match offers boost giving, larger match ratios do not meaningfully outperform the simple 1:1 match.\n\n\nSize of Charitable Contribution\nIn this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.\n\nmodel_all = smf.ols(\"amount ~ treatment\", data=df).fit()\nprint(\"Regression on full sample:\")\nprint(model_all.summary().tables[1])\n\nRegression on full sample:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.8133      0.067     12.063      0.000       0.681       0.945\ntreatment      0.1536      0.083      1.861      0.063      -0.008       0.315\n==============================================================================\n\n\ntodo: now limit the data to just people who made a donation and repeat the previous analysis. This regression allows you to analyze how much respondents donate conditional on donating some positive amount. Interpret the regression coefficients – what did we learn? Does the treatment coefficient have a causal interpretation?\n\ndf_positive = df[df['amount'] &gt; 0]\nmodel_donors = smf.ols(\"amount ~ treatment\", data=df_positive).fit()\nprint(\"\\nRegression on donors only:\")\nprint(model_donors.summary().tables[1])\n\n\nRegression on donors only:\n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     45.5403      2.423     18.792      0.000      40.785      50.296\ntreatment     -1.6684      2.872     -0.581      0.561      -7.305       3.968\n==============================================================================\n\n\ntodo: Make two plot: one for the treatment group and one for the control. Each plot should be a histogram of the donation amounts only among people who donated. Add a red vertical bar or some other annotation to indicate the sample average for each plot.\n\nimport matplotlib.pyplot as plt\n\n# Donation histograms for treatment and control (positive donations only)\nfig, axs = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n\nfor i, group in enumerate([0, 1]):\n    subset = df[(df['treatment'] == group) & (df['amount'] &gt; 0)]['amount']\n    axs[i].hist(subset, bins=30, alpha=0.7)\n    axs[i].axvline(subset.mean(), color='red', linestyle='dashed', linewidth=2)\n    axs[i].set_title(f\"{'Control' if group == 0 else 'Treatment'} Group\")\n    axs[i].set_xlabel(\"Donation Amount\")\n    axs[i].set_ylabel(\"Number of Donors\")\n\nplt.suptitle(\"Donation Amounts among Donors\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nSize of Charitable Contribution\nWe assess whether the treatment affected not just the likelihood of giving, but also the size of donations.\nWe first estimate a regression on the full sample, including those who gave zero. The coefficient on treatment is 0.1536 (p = 0.063), suggesting that the match treatment may have slightly increased average donations, though the effect is marginally insignificant at the 5% level.\nWhen restricting the sample to only those who donated (i.e., positive donation amounts), we find a treatment coefficient of -1.67 (p = 0.561), indicating no significant difference in donation size among donors. This is consistent with the notion that the treatment primarily affected whether people gave, rather than how much they gave.\nTo visualize this, we plot histograms of donation amounts among donors, separated by treatment status. Both distributions are highly right-skewed. The mean donation is visually indicated by a red dashed line in each plot, showing similar average levels.\nThese findings imply that the matching grant mainly served as a behavioral nudge to increase participation, rather than changing the generosity of individual donors. The treatment coefficient in the restricted sample cannot be interpreted causally, since it conditions on post-treatment behavior (i.e., giving)."
  },
  {
    "objectID": "projects/HW1/index.html#simulation-experiment",
    "href": "projects/HW1/index.html#simulation-experiment",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulation Experiment",
    "text": "Simulation Experiment\nAs a reminder of how the t-statistic “works,” in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.\nSuppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made.\nFurther suppose that the true distribution of respondents who do get a charitable donation match of any size is Bernoulli with probability p=0.022 that a donation is made.\n\nLaw of Large Numbers\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(42)\n\n# 10000 draws for each group\nn = 10000\ncontrol = np.random.binomial(1, 0.018, n)\ntreatment = np.random.binomial(1, 0.022, n)\n\ndiffs = treatment - control\ncumulative_avg = np.cumsum(diffs) / np.arange(1, n + 1)\n\n# Plot\nplt.figure(figsize=(10, 5))\nplt.plot(cumulative_avg, label=\"Cumulative average\")\nplt.axhline(0.004, color='red', linestyle='--', label=\"True diff (0.022 - 0.018)\")\nplt.title(\"LLN Simulation: Cumulative Avg of Differences\")\nplt.xlabel(\"Simulation draws\")\nplt.ylabel(\"Cumulative average difference\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCentral Limit Theorem\n\nsample_sizes = [50, 200, 500, 1000]\nplt.figure(figsize=(12, 8))\n\nfor i, n in enumerate(sample_sizes):\n    means = []\n    for _ in range(1000):\n        c = np.random.binomial(1, 0.018, n)\n        t = np.random.binomial(1, 0.022, n)\n        means.append(t.mean() - c.mean())\n    \n    plt.subplot(2, 2, i+1)\n    plt.hist(means, bins=30, edgecolor='black')\n    plt.axvline(0, color='red', linestyle='--')\n    plt.title(f\"CLT: Sample Size = {n}\")\n    plt.xlabel(\"Mean Difference\")\n    plt.ylabel(\"Frequency\")\n\nplt.tight_layout()\nplt.suptitle(\"CLT Simulation: Sampling Distributions\", y=1.02)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nSimulation Experiment\nTo illustrate the mechanics of the t-statistic and reinforce key statistical concepts, we conduct simulations that demonstrate the Law of Large Numbers (LLN) and the Central Limit Theorem (CLT).\n\nLaw of Large Numbers\nWe simulate 10,000 draws from two Bernoulli distributions: one representing the control group with probability 0.018 of giving, and one representing the treatment group with probability 0.022. At each iteration, we compute the difference in outcomes and plot the cumulative average of these differences.\nAs expected, the cumulative average converges toward the true difference in means (0.004). This visualizes the Law of Large Numbers, showing how repeated random samples stabilize around the population parameter.\n\n\nCentral Limit Theorem\nWe simulate 1000 differences in sample means between treatment and control groups at four different sample sizes: 50, 200, 500, and 1000. For each simulation, we draw n observations from each group and compute the average difference.\nThe resulting histograms clearly show that as sample size increases, the distribution of sample mean differences becomes narrower and more symmetric around the true value. At n = 1000, the distribution is nearly normal. These results validate the Central Limit Theorem, which states that the sampling distribution of the sample mean approaches normality as the sample size increases—even when the underlying distribution is Bernoulli.\nTogether, these simulations highlight the theoretical foundations that support our statistical inferences throughout this experiment."
  }
]